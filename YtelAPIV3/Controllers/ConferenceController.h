//
//  YtelAPIV3
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "AudioUrlEnum.h"
#import "AudioUrlEnumHelper.h"

@interface ConferenceController : BaseController

/**
* Completion block definition for asynchronous call to Play Audio */
typedef void (^CompletedPostPlayAudio)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Play an audio file during a conference.
* @param    conferenceSid    Required parameter: The unique identifier for a conference object.
* @param    participantSid    Required parameter: The unique identifier for a participant object.
* @param    audioUrl    Required parameter: The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.
*/
- (void) createPlayAudioAsyncWithConferenceSid:(NSString*) conferenceSid
                participantSid:(NSString*) participantSid
                audioUrl:(enum AudioUrlEnum) audioUrl
                completionBlock:(CompletedPostPlayAudio) onCompleted;

/**
* Completion block definition for asynchronous call to Hangup Participant */
typedef void (^CompletedPostHangupParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove a participant from a conference.
* @param    participantSid    Required parameter: The unique identifier for a participant object.
* @param    conferenceSid    Required parameter: The unique identifier for a conference object.
*/
- (void) createHangupParticipantAsyncWithParticipantSid:(NSString*) participantSid
                conferenceSid:(NSString*) conferenceSid
                completionBlock:(CompletedPostHangupParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to View Conference */
typedef void (^CompletedPostViewConference)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve information about a conference by its ConferenceSid.
* @param    conferenceSid    Required parameter: The unique identifier of each conference resource
*/
- (void) createViewConferenceAsyncWithConferenceSid:(NSString*) conferenceSid
                completionBlock:(CompletedPostViewConference) onCompleted;

/**
* Completion block definition for asynchronous call to View Participant */
typedef void (^CompletedPostViewParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve information about a participant by its ParticipantSid.
* @param    conferenceSid    Required parameter: The unique identifier for a conference object.
* @param    participantSid    Required parameter: The unique identifier for a participant object.
*/
- (void) createViewParticipantAsyncWithConferenceSid:(NSString*) conferenceSid
                participantSid:(NSString*) participantSid
                completionBlock:(CompletedPostViewParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to Silence Participant */
typedef void (^CompletedPostSilenceParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Deaf Mute Participant
* @param    conferenceSid    Required parameter: ID of the active conference
* @param    participantSid    Required parameter: ID of an active participant
* @param    muted    Optional parameter: Mute a participant
* @param    deaf    Optional parameter: Make it so a participant cant hear
*/
- (void) createSilenceParticipantAsyncWithConferenceSid:(NSString*) conferenceSid
                participantSid:(NSString*) participantSid
                muted:(NSNumber*) muted
                deaf:(NSNumber*) deaf
                completionBlock:(CompletedPostSilenceParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to Add Participant */
typedef void (^CompletedPostAddParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Add Participant in conference 
* @param    conferenceSid    Required parameter: The unique identifier for a conference object.
* @param    participantNumber    Required parameter: The phone number of the participant to be added.
* @param    muted    Optional parameter: Specifies if participant should be muted.
* @param    deaf    Optional parameter: Specifies if the participant should hear audio in the conference.
*/
- (void) addParticipantAsyncWithConferenceSid:(NSString*) conferenceSid
                participantNumber:(NSString*) participantNumber
                muted:(NSNumber*) muted
                deaf:(NSNumber*) deaf
                completionBlock:(CompletedPostAddParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to Create Conference */
typedef void (^CompletedPostCreateConference)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
* @param    url    Required parameter: URL requested once the conference connects
* @param    from    Required parameter: A valid 10-digit number (E.164 format) that will be initiating the conference call.
* @param    to    Required parameter: A valid 10-digit number (E.164 format) that is to receive the conference call.
* @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once call connects.
* @param    statusCallBackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.
* @param    statusCallBackMethod    Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
* @param    fallbackUrl    Optional parameter: URL requested if the initial Url parameter fails or encounters an error
* @param    fallbackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
* @param    record    Optional parameter: Specifies if the conference should be recorded.
* @param    recordCallBackUrl    Optional parameter: Recording parameters will be sent here upon completion.
* @param    recordCallBackMethod    Optional parameter: Specifies the HTTP method used to request the required URL once conference connects.
* @param    scheduleTime    Optional parameter: Schedule conference in future. Schedule time must be greater than current time
* @param    timeout    Optional parameter: The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.
*/
- (void) createConferenceAsyncWithUrl:(NSString*) url
                from:(NSString*) from
                to:(NSString*) to
                method:(NSString*) method
                statusCallBackUrl:(NSString*) statusCallBackUrl
                statusCallBackMethod:(NSString*) statusCallBackMethod
                fallbackUrl:(NSString*) fallbackUrl
                fallbackMethod:(NSString*) fallbackMethod
                record:(NSNumber*) record
                recordCallBackUrl:(NSString*) recordCallBackUrl
                recordCallBackMethod:(NSString*) recordCallBackMethod
                scheduleTime:(NSString*) scheduleTime
                timeout:(NSNumber*) timeout
                completionBlock:(CompletedPostCreateConference) onCompleted;

/**
* Completion block definition for asynchronous call to List Participants */
typedef void (^CompletedPostListParticipants)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of participants for an in-progress conference.
* @param    conferenceSid    Required parameter: The unique identifier for a conference.
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: The count of objects to return per page.
* @param    muted    Optional parameter: Specifies if participant should be muted.
* @param    deaf    Optional parameter: Specifies if the participant should hear audio in the conference.
*/
- (void) createListParticipantsAsyncWithConferenceSid:(NSString*) conferenceSid
                page:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                muted:(NSNumber*) muted
                deaf:(NSNumber*) deaf
                completionBlock:(CompletedPostListParticipants) onCompleted;

/**
* Completion block definition for asynchronous call to List Conferences */
typedef void (^CompletedPostListConferences)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of conference objects.
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: Number of individual resources listed in the response per page
* @param    friendlyName    Optional parameter: Only return conferences with the specified FriendlyName
* @param    dateCreated    Optional parameter: Conference created date
*/
- (void) createListConferencesAsyncWithPage:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                friendlyName:(NSString*) friendlyName
                dateCreated:(NSString*) dateCreated
                completionBlock:(CompletedPostListConferences) onCompleted;

@end