//
//  YtelAPIV3
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"

@interface ShortCodeController : BaseController

/**
* Completion block definition for asynchronous call to List Shortcodes */
typedef void (^CompletedPostListShortcodes)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of Short Code assignment associated with your Ytel account.
* @param    shortcode    Optional parameter: Only list Short Code Assignment sent from this Short Code
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: The count of objects to return per page.
*/
- (void) createListShortcodesAsyncWithShortcode:(NSString*) shortcode
                page:(NSString*) page
                pagesize:(NSString*) pagesize
                completionBlock:(CompletedPostListShortcodes) onCompleted;

/**
* Completion block definition for asynchronous call to View SMS */
typedef void (^CompletedPostViewSMS)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a single Short Code object by its shortcode assignment.
* @param    shortcode    Required parameter: List of valid Dedicated Short Code to your Ytel account
*/
- (void) createViewSMSAsyncWithShortcode:(NSString*) shortcode
                completionBlock:(CompletedPostViewSMS) onCompleted;

/**
* Completion block definition for asynchronous call to View SMS */
typedef void (^CompletedPostViewSMS)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* View a single Sms Short Code message.
* @param    messageSid    Required parameter: The unique identifier for the sms resource
*/
- (void) createViewSMSAsyncWithMessageSid:(NSString*) messageSid
                completionBlock:(CompletedPostViewSMS) onCompleted;

/**
* Completion block definition for asynchronous call to List SMS */
typedef void (^CompletedPostListSMS)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of Short Code messages.
* @param    shortcode    Optional parameter: Only list messages sent from this Short Code
* @param    to    Optional parameter: Only list messages sent to this number
* @param    dateSent    Optional parameter: Only list messages sent with the specified date
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pageSize    Optional parameter: The count of objects to return per page.
*/
- (void) createListSMSAsyncWithShortcode:(NSString*) shortcode
                to:(NSString*) to
                dateSent:(NSString*) dateSent
                page:(NSNumber*) page
                pageSize:(NSNumber*) pageSize
                completionBlock:(CompletedPostListSMS) onCompleted;

/**
* Completion block definition for asynchronous call to Send SMS */
typedef void (^CompletedPostSendSMS)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Send Dedicated Shortcode
* @param    shortcode    Required parameter: Your dedicated shortcode
* @param    to    Required parameter: The number to send your SMS to
* @param    body    Required parameter: The body of your message
* @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST
* @param    messagestatuscallback    Optional parameter: URL that can be requested to receive notification when Short Code message was sent.
*/
- (void) createSendSMSAsyncWithShortcode:(int) shortcode
                to:(double) to
                body:(NSString*) body
                method:(NSString*) method
                messagestatuscallback:(NSString*) messagestatuscallback
                completionBlock:(CompletedPostSendSMS) onCompleted;

/**
* Completion block definition for asynchronous call to List Inbound SMS */
typedef void (^CompletedPostListInboundSMS)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: Number of individual resources listed in the response per page
* @param    from    Optional parameter: Only list SMS messages sent from this number
* @param    shortcode    Optional parameter: Only list SMS messages sent to Shortcode
* @param    datecreated    Optional parameter: Only list SMS messages sent in the specified date MAKE REQUEST
*/
- (void) createListInboundSMSAsyncWithPage:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                from:(NSString*) from
                shortcode:(NSString*) shortcode
                datecreated:(NSString*) datecreated
                completionBlock:(CompletedPostListInboundSMS) onCompleted;

/**
* Completion block definition for asynchronous call to Update Shortcode */
typedef void (^CompletedPostUpdateShortcode)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Update a dedicated shortcode.
* @param    shortcode    Required parameter: List of valid dedicated shortcode to your Ytel account.
* @param    friendlyName    Optional parameter: User generated name of the dedicated shortcode.
* @param    callbackMethod    Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
* @param    callbackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
* @param    fallbackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
* @param    fallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
*/
- (void) updateShortcodeAsyncWithShortcode:(NSString*) shortcode
                friendlyName:(NSString*) friendlyName
                callbackMethod:(NSString*) callbackMethod
                callbackUrl:(NSString*) callbackUrl
                fallbackMethod:(NSString*) fallbackMethod
                fallbackUrl:(NSString*) fallbackUrl
                completionBlock:(CompletedPostUpdateShortcode) onCompleted;

@end