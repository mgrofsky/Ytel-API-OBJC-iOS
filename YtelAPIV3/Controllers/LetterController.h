//
//  YtelAPIV3
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"

@interface LetterController : BaseController

/**
* Completion block definition for asynchronous call to Delete Letter */
typedef void (^CompletedPostDeleteLetter)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove a letter object by its LetterId.
* @param    lettersid    Required parameter: The unique identifier for a letter object.
*/
- (void) createDeleteLetterAsyncWithLettersid:(NSString*) lettersid
                completionBlock:(CompletedPostDeleteLetter) onCompleted;

/**
* Completion block definition for asynchronous call to View Letter */
typedef void (^CompletedPostViewLetter)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a letter object by its LetterSid.
* @param    lettersid    Required parameter: The unique identifier for a letter object.
*/
- (void) createViewLetterAsyncWithLettersid:(NSString*) lettersid
                completionBlock:(CompletedPostViewLetter) onCompleted;

/**
* Completion block definition for asynchronous call to Create Letter */
typedef void (^CompletedPostCreateLetter)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
* @param    to    Required parameter: The AddressId or an object structured when creating an address by addresses/Create.
* @param    from    Required parameter: The AddressId or an object structured when creating an address by addresses/Create.
* @param    attachbyid    Required parameter: Set an existing letter by attaching its LetterId.
* @param    file    Required parameter: File can be a 8.5"x11" PDF uploaded file or URL that links to a file.
* @param    color    Required parameter: Specify if letter should be printed in color.
* @param    description    Optional parameter: A description for the letter.
* @param    extraservice    Optional parameter: Add an extra service to your letter. Options are "certified" or "registered". Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
* @param    doublesided    Optional parameter: Specify if letter should be printed on both sides.
* @param    template    Optional parameter: Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
* @param    htmldata    Optional parameter: A string value that contains HTML markup.
*/
- (void) createLetterAsyncWithTo:(NSString*) to
                from:(NSString*) from
                attachbyid:(NSString*) attachbyid
                file:(NSString*) file
                color:(NSString*) color
                description:(NSString*) description
                extraservice:(NSString*) extraservice
                doublesided:(NSString*) doublesided
                template:(NSString*) template
                htmldata:(NSString*) htmldata
                completionBlock:(CompletedPostCreateLetter) onCompleted;

/**
* Completion block definition for asynchronous call to List Letters */
typedef void (^CompletedPostListLetters)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: The count of objects to return per page.
* @param    lettersid    Optional parameter: The unique identifier for a letter object.
* @param    dateCreated    Optional parameter: The date the letter was created.
*/
- (void) createListLettersAsyncWithPage:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                lettersid:(NSString*) lettersid
                dateCreated:(NSString*) dateCreated
                completionBlock:(CompletedPostListLetters) onCompleted;

@end