//
//  YtelAPIV3
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"

@interface SharedShortCodeController : BaseController

/**
* Completion block definition for asynchronous call to View Shortcode */
typedef void (^CompletedPostViewShortcode)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* The response returned here contains all resource properties associated with the given Shortcode.
* @param    shortcode    Required parameter: List of valid Shortcode to your Ytel account
*/
- (void) createViewShortcodeAsyncWithShortcode:(NSString*) shortcode
                completionBlock:(CompletedPostViewShortcode) onCompleted;

/**
* Completion block definition for asynchronous call to View Keyword */
typedef void (^CompletedPostViewKeyword)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* View a set of properties for a single keyword.
* @param    keywordid    Required parameter: The unique identifier of each keyword
*/
- (void) createViewKeywordAsyncWithKeywordid:(NSString*) keywordid
                completionBlock:(CompletedPostViewKeyword) onCompleted;

/**
* Completion block definition for asynchronous call to View Template */
typedef void (^CompletedPostViewTemplate)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* View a Shared ShortCode Template
* @param    templateId    Required parameter: The unique identifier for a template object
*/
- (void) createViewTemplateAsyncWithTemplateId:(NSUUID*) templateId
                completionBlock:(CompletedPostViewTemplate) onCompleted;

/**
* Completion block definition for asynchronous call to List Inbound SMS */
typedef void (^CompletedPostListInboundSMS)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* List All Inbound ShortCode
* @param    datecreated    Optional parameter: Only list messages sent with the specified date
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: Number of individual resources listed in the response per page
* @param    from    Optional parameter: From Number to Inbound ShortCode
* @param    shortcode    Optional parameter: Only list messages sent to this Short Code
*/
- (void) createListInboundSMSAsyncWithDatecreated:(NSString*) datecreated
                page:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                from:(NSString*) from
                shortcode:(NSString*) shortcode
                completionBlock:(CompletedPostListInboundSMS) onCompleted;

/**
* Completion block definition for asynchronous call to Send SMS */
typedef void (^CompletedPostSendSMS)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Send an SMS from a Ytel ShortCode
* @param    shortcode    Required parameter: The Short Code number that is the sender of this message
* @param    to    Required parameter: A valid 10-digit number that should receive the message
* @param    templateid    Required parameter: The unique identifier for the template used for the message
* @param    data    Required parameter: format of your data, example: {companyname}:test,{otpcode}:1234
* @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once the Short Code message is sent.
* @param    messageStatusCallback    Optional parameter: URL that can be requested to receive notification when Short Code message was sent.
*/
- (void) createSendSMSAsyncWithShortcode:(NSString*) shortcode
                to:(NSString*) to
                templateid:(NSUUID*) templateid
                data:(NSString*) data
                method:(NSString*) method
                messageStatusCallback:(NSString*) messageStatusCallback
                completionBlock:(CompletedPostSendSMS) onCompleted;

/**
* Completion block definition for asynchronous call to List Templates */
typedef void (^CompletedPostListTemplates)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* List Shortcode Templates by Type
* @param    type    Optional parameter: The type (category) of template Valid values: marketing, authorization
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: The count of objects to return per page.
* @param    shortcode    Optional parameter: Only list templates of type
*/
- (void) createListTemplatesAsyncWithType:(NSString*) type
                page:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                shortcode:(NSString*) shortcode
                completionBlock:(CompletedPostListTemplates) onCompleted;

/**
* Completion block definition for asynchronous call to List Keywords */
typedef void (^CompletedPostListKeywords)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of keywords associated with your Ytel account.
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: Number of individual resources listed in the response per page
* @param    keyword    Optional parameter: Only list keywords of keyword
* @param    shortcode    Optional parameter: Only list keywords of shortcode
*/
- (void) createListKeywordsAsyncWithPage:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                keyword:(NSString*) keyword
                shortcode:(NSNumber*) shortcode
                completionBlock:(CompletedPostListKeywords) onCompleted;

/**
* Completion block definition for asynchronous call to List Shortcodes */
typedef void (^CompletedPostListShortcodes)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of shortcode assignment associated with your Ytel account.
* @param    shortcode    Optional parameter: Only list keywords of shortcode
* @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    pagesize    Optional parameter: Number of individual resources listed in the response per page
*/
- (void) createListShortcodesAsyncWithShortcode:(NSString*) shortcode
                page:(NSNumber*) page
                pagesize:(NSNumber*) pagesize
                completionBlock:(CompletedPostListShortcodes) onCompleted;

/**
* Completion block definition for asynchronous call to Update Shortcode */
typedef void (^CompletedPostUpdateShortcode)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Update Assignment
* @param    shortcode    Required parameter: List of valid shortcode to your Ytel account
* @param    friendlyName    Optional parameter: User generated name of the shortcode
* @param    callbackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
* @param    callbackMethod    Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
* @param    fallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
* @param    fallbackUrlMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
*/
- (void) updateShortcodeAsyncWithShortcode:(NSString*) shortcode
                friendlyName:(NSString*) friendlyName
                callbackUrl:(NSString*) callbackUrl
                callbackMethod:(NSString*) callbackMethod
                fallbackUrl:(NSString*) fallbackUrl
                fallbackUrlMethod:(NSString*) fallbackUrlMethod
                completionBlock:(CompletedPostUpdateShortcode) onCompleted;

@end