//
//  YtelAPIV3
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "PhoneNumberController.h"

@implementation PhoneNumberController

/**
* Get DID Score Number
* @param    phonenumber    Required parameter: Specifies the multiple phone numbers for check updated spamscore .
* @return	Returns the void response from the API call */
- (void) createGetDIDScoreAsyncWithPhonenumber:(NSString*) phonenumber
                completionBlock:(CompletedPostGetDIDScore) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/getdidscore.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"Phonenumber": phonenumber
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Transfer phone number that has been purchased for from one account to another account.
* @param    phonenumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
* @param    fromaccountsid    Required parameter: A specific Accountsid from where Number is getting transfer.
* @param    toaccountsid    Required parameter: A specific Accountsid to which Number is getting transfer.
* @return	Returns the void response from the API call */
- (void) createMoveNumberAsyncWithPhonenumber:(NSString*) phonenumber
                fromaccountsid:(NSString*) fromaccountsid
                toaccountsid:(NSString*) toaccountsid
                completionBlock:(CompletedPostMoveNumber) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/transferphonenumbers.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"phonenumber": phonenumber,
        @"fromaccountsid": fromaccountsid,
        @"toaccountsid": toaccountsid
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Purchase a phone number to be used with your Ytel account
* @param    phoneNumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
* @return	Returns the void response from the API call */
- (void) createPurchaseNumberAsyncWithPhoneNumber:(NSString*) phoneNumber
                completionBlock:(CompletedPostPurchaseNumber) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/buynumber.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"PhoneNumber": phoneNumber
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Remove a purchased Ytel number from your account.
* @param    responseType    Required parameter: Response type format xml or json
* @param    phoneNumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
* @return	Returns the void response from the API call */
- (void) createReleaseNumberAsyncWithResponseType:(NSString*) responseType
                phoneNumber:(NSString*) phoneNumber
                completionBlock:(CompletedPostReleaseNumber) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/releasenumber.{ResponseType}"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withTemplateParameters: @{
                    @"ResponseType": responseType
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"PhoneNumber": phoneNumber
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Retrieve the details for a phone number by its number.
* @param    phoneNumber    Required parameter: A valid Ytel 10-digit phone number (E.164 format).
* @return	Returns the void response from the API call */
- (void) createViewDetailsAsyncWithPhoneNumber:(NSString*) phoneNumber
                completionBlock:(CompletedPostViewDetails) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/viewnumber.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"PhoneNumber": phoneNumber
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Remove a purchased Ytel number from your account.
* @param    phoneNumber    Required parameter: A valid Ytel comma separated numbers (E.164 format).
* @return	Returns the void response from the API call */
- (void) createBulkReleaseAsyncWithPhoneNumber:(NSString*) phoneNumber
                completionBlock:(CompletedPostBulkRelease) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/massreleasenumber.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"PhoneNumber": phoneNumber
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
* @param    numbertype    Required parameter: Number type either SMS,Voice or all
* @param    areacode    Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.
* @param    pagesize    Optional parameter: The count of objects to return.
* @return	Returns the void response from the API call */
- (void) createAvailableNumbersAsyncWithNumbertype:(enum NumbertypeEnum) numbertype
                areacode:(NSString*) areacode
                pagesize:(NSNumber*) pagesize
                completionBlock:(CompletedPostAvailableNumbers) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/availablenumber.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"numbertype": [NumbertypeEnumHelper stringFromNumbertypeEnum: (enum NumbertypeEnum) numbertype withDefault: [NSNull null]],
        @"areacode": areacode,
        @"pagesize": (nil != pagesize) ? pagesize : [NSNull null]
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
* @param    phoneNumber    Required parameter: A valid Ytel number (E.164 format).
* @param    voiceUrl    Required parameter: URL requested once the call connects
* @param    friendlyName    Optional parameter: Phone number friendly name description
* @param    voiceMethod    Optional parameter: Post or Get
* @param    voiceFallbackUrl    Optional parameter: URL requested if the voice URL is not available
* @param    voiceFallbackMethod    Optional parameter: Post or Get
* @param    hangupCallback    Optional parameter: callback url after a hangup occurs
* @param    hangupCallbackMethod    Optional parameter: Post or Get
* @param    heartbeatUrl    Optional parameter: URL requested once the call connects
* @param    heartbeatMethod    Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time
* @param    smsUrl    Optional parameter: URL requested when an SMS is received
* @param    smsMethod    Optional parameter: Post or Get
* @param    smsFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
* @param    smsFallbackMethod    Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
* @return	Returns the void response from the API call */
- (void) updateNumberAsyncWithPhoneNumber:(NSString*) phoneNumber
                voiceUrl:(NSString*) voiceUrl
                friendlyName:(NSString*) friendlyName
                voiceMethod:(NSString*) voiceMethod
                voiceFallbackUrl:(NSString*) voiceFallbackUrl
                voiceFallbackMethod:(NSString*) voiceFallbackMethod
                hangupCallback:(NSString*) hangupCallback
                hangupCallbackMethod:(NSString*) hangupCallbackMethod
                heartbeatUrl:(NSString*) heartbeatUrl
                heartbeatMethod:(NSString*) heartbeatMethod
                smsUrl:(NSString*) smsUrl
                smsMethod:(NSString*) smsMethod
                smsFallbackUrl:(NSString*) smsFallbackUrl
                smsFallbackMethod:(NSString*) smsFallbackMethod
                completionBlock:(CompletedPostUpdateNumber) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/updatenumber.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"PhoneNumber": phoneNumber,
        @"VoiceUrl": voiceUrl,
        @"FriendlyName": (nil != friendlyName) ? friendlyName : [NSNull null],
        @"VoiceMethod": (nil != voiceMethod) ? voiceMethod : [NSNull null],
        @"VoiceFallbackUrl": (nil != voiceFallbackUrl) ? voiceFallbackUrl : [NSNull null],
        @"VoiceFallbackMethod": (nil != voiceFallbackMethod) ? voiceFallbackMethod : [NSNull null],
        @"HangupCallback": (nil != hangupCallback) ? hangupCallback : [NSNull null],
        @"HangupCallbackMethod": (nil != hangupCallbackMethod) ? hangupCallbackMethod : [NSNull null],
        @"HeartbeatUrl": (nil != heartbeatUrl) ? heartbeatUrl : [NSNull null],
        @"HeartbeatMethod": (nil != heartbeatMethod) ? heartbeatMethod : [NSNull null],
        @"SmsUrl": (nil != smsUrl) ? smsUrl : [NSNull null],
        @"SmsMethod": (nil != smsMethod) ? smsMethod : [NSNull null],
        @"SmsFallbackUrl": (nil != smsFallbackUrl) ? smsFallbackUrl : [NSNull null],
        @"SmsFallbackMethod": (nil != smsFallbackMethod) ? smsFallbackMethod : [NSNull null]
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Retrieve a list of purchased phones numbers associated with your Ytel account.
* @param    page    Optional parameter: Which page of the overall response will be returned. Page indexing starts at 1.
* @param    pageSize    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
* @param    numberType    Optional parameter: The capability supported by the number.Number type either SMS,Voice or all
* @param    friendlyName    Optional parameter: A human-readable label added to the number object.
* @return	Returns the void response from the API call */
- (void) createListNumbersAsyncWithPage:(NSNumber*) page
                pageSize:(NSNumber*) pageSize
                numberType:(enum NumberType14Enum) numberType
                friendlyName:(NSString*) friendlyName
                completionBlock:(CompletedPostListNumbers) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/listnumber.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"Page": (nil != page) ? page : [NSNull null],
        @"PageSize": (nil != pageSize) ? pageSize : [NSNull null],
        @"NumberType": [NumberType14EnumHelper stringFromNumberType14Enum: (enum NumberType14Enum) numberType withDefault: [NSNull null]],
        @"FriendlyName": (nil != friendlyName) ? friendlyName : [NSNull null]
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
* @param    phoneNumber    Required parameter: A valid comma(,) separated Ytel numbers. (E.164 format).
* @param    voiceUrl    Required parameter: The URL returning InboundXML incoming calls should execute when connected.
* @param    friendlyName    Optional parameter: A human-readable value for labeling the number.
* @param    voiceMethod    Optional parameter: Specifies the HTTP method used to request the VoiceUrl once incoming call connects.
* @param    voiceFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url
* @param    voiceFallbackMethod    Optional parameter: Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.
* @param    hangupCallback    Optional parameter: URL that can be requested to receive notification when and how incoming call has ended.
* @param    hangupCallbackMethod    Optional parameter: The HTTP method Ytel will use when requesting the HangupCallback URL.
* @param    heartbeatUrl    Optional parameter: URL that can be used to monitor the phone number.
* @param    heartbeatMethod    Optional parameter: The HTTP method Ytel will use when requesting the HeartbeatUrl.
* @param    smsUrl    Optional parameter: URL requested when an SMS is received.
* @param    smsMethod    Optional parameter: The HTTP method Ytel will use when requesting the SmsUrl.
* @param    smsFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
* @param    smsFallbackMethod    Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
* @return	Returns the void response from the API call */
- (void) createBulkUpdateNumbersAsyncWithPhoneNumber:(NSString*) phoneNumber
                voiceUrl:(NSString*) voiceUrl
                friendlyName:(NSString*) friendlyName
                voiceMethod:(NSString*) voiceMethod
                voiceFallbackUrl:(NSString*) voiceFallbackUrl
                voiceFallbackMethod:(NSString*) voiceFallbackMethod
                hangupCallback:(NSString*) hangupCallback
                hangupCallbackMethod:(NSString*) hangupCallbackMethod
                heartbeatUrl:(NSString*) heartbeatUrl
                heartbeatMethod:(NSString*) heartbeatMethod
                smsUrl:(NSString*) smsUrl
                smsMethod:(NSString*) smsMethod
                smsFallbackUrl:(NSString*) smsFallbackUrl
                smsFallbackMethod:(NSString*) smsFallbackMethod
                completionBlock:(CompletedPostBulkUpdateNumbers) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/massupdatenumber.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"PhoneNumber": phoneNumber,
        @"VoiceUrl": voiceUrl,
        @"FriendlyName": (nil != friendlyName) ? friendlyName : [NSNull null],
        @"VoiceMethod": (nil != voiceMethod) ? voiceMethod : [NSNull null],
        @"VoiceFallbackUrl": (nil != voiceFallbackUrl) ? voiceFallbackUrl : [NSNull null],
        @"VoiceFallbackMethod": (nil != voiceFallbackMethod) ? voiceFallbackMethod : [NSNull null],
        @"HangupCallback": (nil != hangupCallback) ? hangupCallback : [NSNull null],
        @"HangupCallbackMethod": (nil != hangupCallbackMethod) ? hangupCallbackMethod : [NSNull null],
        @"HeartbeatUrl": (nil != heartbeatUrl) ? heartbeatUrl : [NSNull null],
        @"HeartbeatMethod": (nil != heartbeatMethod) ? heartbeatMethod : [NSNull null],
        @"SmsUrl": (nil != smsUrl) ? smsUrl : [NSNull null],
        @"SmsMethod": (nil != smsMethod) ? smsMethod : [NSNull null],
        @"SmsFallbackUrl": (nil != smsFallbackUrl) ? smsFallbackUrl : [NSNull null],
        @"SmsFallbackMethod": (nil != smsFallbackMethod) ? smsFallbackMethod : [NSNull null]
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
* @param    numberType    Required parameter: The capability the number supports.
* @param    areaCode    Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.
* @param    quantity    Required parameter: A positive integer that tells how many number you want to buy at a time.
* @param    leftover    Optional parameter: If desired quantity is unavailable purchase what is available .
* @return	Returns the void response from the API call */
- (void) createBulkBuyNumbersAsyncWithNumberType:(enum NumberType15Enum) numberType
                areaCode:(NSString*) areaCode
                quantity:(NSString*) quantity
                leftover:(NSString*) leftover
                completionBlock:(CompletedPostBulkBuyNumbers) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/incomingphone/bulkbuy.json"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"NumberType": [NumberType15EnumHelper stringFromNumberType15Enum: (enum NumberType15Enum) numberType withDefault: [NSNull null]],
        @"AreaCode": areaCode,
        @"Quantity": quantity,
        @"Leftover": (nil != leftover) ? leftover : [NSNull null]
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters
        [_request setUsername: Configuration_BasicAuthUserName];
        [_request setPassword: Configuration_BasicAuthPassword];

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
 
             NSString* _result = [(HttpStringResponse*)_response body];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}


@end