//
//  EmailController.h
//  YtelAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "CreateEmailListblockemailInput.h"
#import "CreateEmailListspamemailInput.h"
#import "CreateEmailListbounceemailInput.h"
#import "CreateEmailListinvalidemailInput.h"
#import "CreateEmailListunsubscribedemailInput.h"
#import "TypeEnum.h"
#import "TypeEnumHelper.h"
#import "CreateEmailSendemailsInput.h"

@interface EmailController : BaseController

/**
* Completion block definition for asynchronous call to EmailDeleteinvalidemail */
typedef void (^CompletedPostEmailDeleteinvalidemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove an email from the invalid email list.
* @param    email    Required parameter: A valid email address that is to be remove from the invalid email list.
*/
- (void) createEmailDeleteinvalidemailAsyncWithEmail:(NSString*) email
                completionBlock:(CompletedPostEmailDeleteinvalidemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailListblockemail */
typedef void (^CompletedPostEmailListblockemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of emails that have been blocked.
* @param  CreateEmailListblockemailInput     Object with all parameters
*/
- (void) createEmailListblockemailAsyncWithCreateEmailListblockemailInput:(CreateEmailListblockemailInput*) input
                completionBlock:(CompletedPostEmailListblockemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailListspamemail */
typedef void (^CompletedPostEmailListspamemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of emails that are on the spam list.
* @param  CreateEmailListspamemailInput     Object with all parameters
*/
- (void) createEmailListspamemailAsyncWithCreateEmailListspamemailInput:(CreateEmailListspamemailInput*) input
                completionBlock:(CompletedPostEmailListspamemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailListbounceemail */
typedef void (^CompletedPostEmailListbounceemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of emails that have bounced.
* @param  CreateEmailListbounceemailInput     Object with all parameters
*/
- (void) createEmailListbounceemailAsyncWithCreateEmailListbounceemailInput:(CreateEmailListbounceemailInput*) input
                completionBlock:(CompletedPostEmailListbounceemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailDeletebouncesemail */
typedef void (^CompletedPostEmailDeletebouncesemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove an email address from the bounced list.
* @param    email    Required parameter: The email address to be remove from the bounced email list.
*/
- (void) createEmailDeletebouncesemailAsyncWithEmail:(NSString*) email
                completionBlock:(CompletedPostEmailDeletebouncesemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailListinvalidemail */
typedef void (^CompletedPostEmailListinvalidemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of invalid email addresses.
* @param  CreateEmailListinvalidemailInput     Object with all parameters
*/
- (void) createEmailListinvalidemailAsyncWithCreateEmailListinvalidemailInput:(CreateEmailListinvalidemailInput*) input
                completionBlock:(CompletedPostEmailListinvalidemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailListunsubscribedemail */
typedef void (^CompletedPostEmailListunsubscribedemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of email addresses from the unsubscribe list.
* @param  CreateEmailListunsubscribedemailInput     Object with all parameters
*/
- (void) createEmailListunsubscribedemailAsyncWithCreateEmailListunsubscribedemailInput:(CreateEmailListunsubscribedemailInput*) input
                completionBlock:(CompletedPostEmailListunsubscribedemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailDeleteunsubscribedemail */
typedef void (^CompletedPostEmailDeleteunsubscribedemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove an email address from the list of unsubscribed emails.
* @param    email    Required parameter: A valid email address that is to be remove from the unsubscribe list.
*/
- (void) createEmailDeleteunsubscribedemailAsyncWithEmail:(NSString*) email
                completionBlock:(CompletedPostEmailDeleteunsubscribedemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailAddunsubscribesemail */
typedef void (^CompletedPostEmailAddunsubscribesemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Add an email to the unsubscribe list
* @param    email    Required parameter: A valid email address that is to be added to the unsubscribe list
*/
- (void) createEmailAddunsubscribesemailAsyncWithEmail:(NSString*) email
                completionBlock:(CompletedPostEmailAddunsubscribesemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailDeleteblocksemail */
typedef void (^CompletedPostEmailDeleteblocksemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove an email from blocked emails list.
* @param    email    Required parameter: The email address to be remove from the blocked list.
*/
- (void) createEmailDeleteblocksemailAsyncWithEmail:(NSString*) email
                completionBlock:(CompletedPostEmailDeleteblocksemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailDeletespamemail */
typedef void (^CompletedPostEmailDeletespamemail)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove an email from the spam email list.
* @param    email    Required parameter: A valid email address that is to be remove from the spam list.
*/
- (void) createEmailDeletespamemailAsyncWithEmail:(NSString*) email
                completionBlock:(CompletedPostEmailDeletespamemail) onCompleted;

/**
* Completion block definition for asynchronous call to EmailSendemails */
typedef void (^CompletedPostEmailSendemails)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Create and submit an email message to one or more email addresses.
* @param  CreateEmailSendemailsInput     Object with all parameters
*/
- (void) createEmailSendemailsAsyncWithCreateEmailSendemailsInput:(CreateEmailSendemailsInput*) input
                completionBlock:(CompletedPostEmailSendemails) onCompleted;

@end