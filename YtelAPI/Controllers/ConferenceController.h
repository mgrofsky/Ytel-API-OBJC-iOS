//
//  ConferenceController.h
//  YtelAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "AudioUrlEnum.h"
#import "AudioUrlEnumHelper.h"
#import "CreateConferencesPlayAudioInput.h"
#import "CreateConferencesHangupParticipantInput.h"
#import "CreateConferencesListconferenceInput.h"
#import "CreateConferencesListParticipantInput.h"
#import "CreateConferencesViewParticipantInput.h"
#import "CreateConferencesAddParticipantInput.h"
#import "CreateConferencesCreateConferenceInput.h"
#import "CreateConferencesDeafMuteParticipantInput.h"

@interface ConferenceController : BaseController

/**
* Completion block definition for asynchronous call to ConferencesPlayAudio */
typedef void (^CompletedPostConferencesPlayAudio)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Play an audio file during a conference.
* @param  CreateConferencesPlayAudioInput     Object with all parameters
*/
- (void) createConferencesPlayAudioAsyncWithCreateConferencesPlayAudioInput:(CreateConferencesPlayAudioInput*) input
                completionBlock:(CompletedPostConferencesPlayAudio) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesHangupParticipant */
typedef void (^CompletedPostConferencesHangupParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Remove a participant from a conference.
* @param  CreateConferencesHangupParticipantInput     Object with all parameters
*/
- (void) createConferencesHangupParticipantAsyncWithCreateConferencesHangupParticipantInput:(CreateConferencesHangupParticipantInput*) input
                completionBlock:(CompletedPostConferencesHangupParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesViewconference */
typedef void (^CompletedPostConferencesViewconference)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve information about a conference by its ConferenceSid.
* @param    conferenceSid    Required parameter: The unique identifier of each conference resource
*/
- (void) createConferencesViewconferenceAsyncWithConferenceSid:(NSString*) conferenceSid
                completionBlock:(CompletedPostConferencesViewconference) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesListconference */
typedef void (^CompletedPostConferencesListconference)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of conference objects.
* @param  CreateConferencesListconferenceInput     Object with all parameters
*/
- (void) createConferencesListconferenceAsyncWithCreateConferencesListconferenceInput:(CreateConferencesListconferenceInput*) input
                completionBlock:(CompletedPostConferencesListconference) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesListParticipant */
typedef void (^CompletedPostConferencesListParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve a list of participants for an in-progress conference.
* @param  CreateConferencesListParticipantInput     Object with all parameters
*/
- (void) createConferencesListParticipantAsyncWithCreateConferencesListParticipantInput:(CreateConferencesListParticipantInput*) input
                completionBlock:(CompletedPostConferencesListParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesViewParticipant */
typedef void (^CompletedPostConferencesViewParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Retrieve information about a participant by its ParticipantSid.
* @param  CreateConferencesViewParticipantInput     Object with all parameters
*/
- (void) createConferencesViewParticipantAsyncWithCreateConferencesViewParticipantInput:(CreateConferencesViewParticipantInput*) input
                completionBlock:(CompletedPostConferencesViewParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesAddParticipant */
typedef void (^CompletedPostConferencesAddParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Add Participant in conference 
* @param  CreateConferencesAddParticipantInput     Object with all parameters
*/
- (void) createConferencesAddParticipantAsyncWithCreateConferencesAddParticipantInput:(CreateConferencesAddParticipantInput*) input
                completionBlock:(CompletedPostConferencesAddParticipant) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesCreateConference */
typedef void (^CompletedPostConferencesCreateConference)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
* @param  CreateConferencesCreateConferenceInput     Object with all parameters
*/
- (void) createConferencesCreateConferenceAsyncWithCreateConferencesCreateConferenceInput:(CreateConferencesCreateConferenceInput*) input
                completionBlock:(CompletedPostConferencesCreateConference) onCompleted;

/**
* Completion block definition for asynchronous call to ConferencesDeafMuteParticipant */
typedef void (^CompletedPostConferencesDeafMuteParticipant)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Deaf Mute Participant
* @param  CreateConferencesDeafMuteParticipantInput     Object with all parameters
*/
- (void) createConferencesDeafMuteParticipantAsyncWithCreateConferencesDeafMuteParticipantInput:(CreateConferencesDeafMuteParticipantInput*) input
                completionBlock:(CompletedPostConferencesDeafMuteParticipant) onCompleted;

@end